// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/rbacManager.proto

package rbacManager

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RbacManager service

func NewRbacManagerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RbacManager service

type RbacManagerService interface {
	ManagerGet(ctx context.Context, in *ManagerGetRequest, opts ...client.CallOption) (*ManagerGetResponse, error)
	ManagerAdd(ctx context.Context, in *ManagerAddRequest, opts ...client.CallOption) (*ManagerAddResponse, error)
	ManagerEdit(ctx context.Context, in *ManagerEditRequest, opts ...client.CallOption) (*ManagerEditResponse, error)
	ManagerDelete(ctx context.Context, in *ManagerDeleteRequest, opts ...client.CallOption) (*ManagerDeleteResponse, error)
}

type rbacManagerService struct {
	c    client.Client
	name string
}

func NewRbacManagerService(name string, c client.Client) RbacManagerService {
	return &rbacManagerService{
		c:    c,
		name: name,
	}
}

func (c *rbacManagerService) ManagerGet(ctx context.Context, in *ManagerGetRequest, opts ...client.CallOption) (*ManagerGetResponse, error) {
	req := c.c.NewRequest(c.name, "RbacManager.ManagerGet", in)
	out := new(ManagerGetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacManagerService) ManagerAdd(ctx context.Context, in *ManagerAddRequest, opts ...client.CallOption) (*ManagerAddResponse, error) {
	req := c.c.NewRequest(c.name, "RbacManager.ManagerAdd", in)
	out := new(ManagerAddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacManagerService) ManagerEdit(ctx context.Context, in *ManagerEditRequest, opts ...client.CallOption) (*ManagerEditResponse, error) {
	req := c.c.NewRequest(c.name, "RbacManager.ManagerEdit", in)
	out := new(ManagerEditResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacManagerService) ManagerDelete(ctx context.Context, in *ManagerDeleteRequest, opts ...client.CallOption) (*ManagerDeleteResponse, error) {
	req := c.c.NewRequest(c.name, "RbacManager.ManagerDelete", in)
	out := new(ManagerDeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RbacManager service

type RbacManagerHandler interface {
	ManagerGet(context.Context, *ManagerGetRequest, *ManagerGetResponse) error
	ManagerAdd(context.Context, *ManagerAddRequest, *ManagerAddResponse) error
	ManagerEdit(context.Context, *ManagerEditRequest, *ManagerEditResponse) error
	ManagerDelete(context.Context, *ManagerDeleteRequest, *ManagerDeleteResponse) error
}

func RegisterRbacManagerHandler(s server.Server, hdlr RbacManagerHandler, opts ...server.HandlerOption) error {
	type rbacManager interface {
		ManagerGet(ctx context.Context, in *ManagerGetRequest, out *ManagerGetResponse) error
		ManagerAdd(ctx context.Context, in *ManagerAddRequest, out *ManagerAddResponse) error
		ManagerEdit(ctx context.Context, in *ManagerEditRequest, out *ManagerEditResponse) error
		ManagerDelete(ctx context.Context, in *ManagerDeleteRequest, out *ManagerDeleteResponse) error
	}
	type RbacManager struct {
		rbacManager
	}
	h := &rbacManagerHandler{hdlr}
	return s.Handle(s.NewHandler(&RbacManager{h}, opts...))
}

type rbacManagerHandler struct {
	RbacManagerHandler
}

func (h *rbacManagerHandler) ManagerGet(ctx context.Context, in *ManagerGetRequest, out *ManagerGetResponse) error {
	return h.RbacManagerHandler.ManagerGet(ctx, in, out)
}

func (h *rbacManagerHandler) ManagerAdd(ctx context.Context, in *ManagerAddRequest, out *ManagerAddResponse) error {
	return h.RbacManagerHandler.ManagerAdd(ctx, in, out)
}

func (h *rbacManagerHandler) ManagerEdit(ctx context.Context, in *ManagerEditRequest, out *ManagerEditResponse) error {
	return h.RbacManagerHandler.ManagerEdit(ctx, in, out)
}

func (h *rbacManagerHandler) ManagerDelete(ctx context.Context, in *ManagerDeleteRequest, out *ManagerDeleteResponse) error {
	return h.RbacManagerHandler.ManagerDelete(ctx, in, out)
}
